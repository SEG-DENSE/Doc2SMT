#### size() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 6)))
(assert (= ?r (s!ze (key ?p0) 6)))
#### empty() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r Bool)
(assert (= ?r (= (s!ze (key ?p0) 6) 0)))
#### containskey(Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?r Bool)
(assert (and  (= ?r (and (select (key ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (= (select (mapping ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (value ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1))))))))
#### containsvalue(Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?r Bool)
(assert (and  (= ?r (exists ((_key Int)) (and (select (key ?p0) _key) (and (select (key ?p0) _key) (= (select (mapping ?p0) _key) ?p1)))))))
#### get(Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 7)))
(assert (and  (= true (ite (not (and (select (key ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (= (select (mapping ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (value ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))))) (= ?r 7) (and (select (key ?p0) ?p1) (= (select (mapping ?p0) ?p1) ?r))))))
#### put(Object,Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?_p0 (Map Int Int))
(assert (= (key ?_p0) ((_ map and) (key ?_p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?_p0) x) (and (>= (select (mapping ?_p0) x) -2) (<= (select (mapping ?_p0) x) 6)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?p2 Int)
(assert (and (>= ?p2 -2) (<= ?p2 7)))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 7)))
(assert (and  (= true (and (and (= (key ?_p0) (store (key ?p0) ?p1 true)) (= (mapping ?_p0) (store (mapping ?p0) ?p1 ?p2))) (ite (not (and (select (key ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (= (select (mapping ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (value ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))))) (= ?r 7) (and (select (key ?p0) ?p1) (= (select (mapping ?p0) ?p1) ?r)))))))
#### remove(Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?_p0 (Map Int Int))
(assert (= (key ?_p0) ((_ map and) (key ?_p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?_p0) x) (and (>= (select (mapping ?_p0) x) -2) (<= (select (mapping ?_p0) x) 6)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 7)))
(assert (and  (= true (and (ite (and (select (key ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (= (select (mapping ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (value ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1))))) (and (= (key ?_p0) (store (key ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1))) false)) (= (mapping ?_p0) (store (mapping ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1))) (+ 6 1)))) (not (or (not (= (key ?p0) (key ?_p0))) (not (= (mapping ?p0) (mapping ?_p0)))))) (ite (not (and (select (key ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (= (select (mapping ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (value ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))))) (= ?r 7) (and (select (key ?p0) ?p1) (= (select (mapping ?p0) ?p1) ?r)))))))
#### putall(Map) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Array (Entry Int Int) Bool))
(declare-const ?_p0 (Map Int Int))
(assert (= (key ?_p0) ((_ map and) (key ?_p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?_p0) x) (and (>= (select (mapping ?_p0) x) -2) (<= (select (mapping ?_p0) x) 6)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 (Map Int Int))
(assert (= (key ?p1) ((_ map and) (key ?p1) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p1) x) (and (>= (select (mapping ?p1) x) -2) (<= (select (mapping ?p1) x) 6)))))
(assert (and  (= true (and (= (key ?_p0) ((_ map or) (key ?p0) (key ?p1))) (forall ((x Int)) (ite (select (key ?p1) x) (= (select (mapping ?_p0) x) (select (mapping ?p1) x)) (= (select (mapping ?_p0) x) (select (mapping ?p0) x))))))))
#### clear() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Array (Entry Int Int) Bool))
(declare-const ?_p0 (Map Int Int))
(assert (= (key ?_p0) ((_ map and) (key ?_p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?_p0) x) (and (>= (select (mapping ?_p0) x) -2) (<= (select (mapping ?_p0) x) 6)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(assert (and  (= true (= (key ?_p0) ((_ map and) (key ?p0) ((_ map not) (key ?p0)))))))
#### keyset() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r (Set Int))
(assert (= (mapping ?r) ((_ map and) (mapping ?r) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (and  (= true (= (mapping ?r) (key ?p0)))))
#### entryset() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Array (Entry Int Int) Bool))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r (Set (Entry Int Int)))
(assert (and (and (forall ((x Int)(y Int)) (ite (and (select (key ?p0) x) (= y (select (mapping ?p0) x))) (select t0 ((as mk-entry (Entry Int Int)) x y)) (not (select t0 ((as mk-entry (Entry Int Int)) x y))))) ) (= true (= (mapping ?r) t0))))
#### equals(Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 (Map Int Int))
(assert (= (key ?p1) ((_ map and) (key ?p1) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p1) x) (and (>= (select (mapping ?p1) x) -2) (<= (select (mapping ?p1) x) 6)))))
(declare-const ?r Bool)
(assert (= ?r (and (= (key ?p0) (key ?p1)) (forall ((k!1 Int)) (=> (select (key ?p0) k!1) (and (= (select (mapping ?p0) k!1) (select (mapping ?p1) k!1))))))))
#### getordefault(Object,Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Seq T)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?p2 Int)
(assert (and (>= ?p2 -2) (<= ?p2 7)))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 7)))
(assert (and  (= true (ite (not (and (select (key ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (= (select (mapping ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (value ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))))) (= ?r ?p2) (and (select (key ?p0) ?p1) (= (select (mapping ?p0) ?p1) ?r))))))

#### replace(Object,Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?_p0 (Map Int Int))
(assert (= (key ?_p0) ((_ map and) (key ?_p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?_p0) x) (and (>= (select (mapping ?_p0) x) -2) (<= (select (mapping ?_p0) x) 6)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?p2 Int)
(assert (and (>= ?p2 -2) (<= ?p2 7)))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 7)))
(assert (and  (= true (and (ite (and (select (key ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (= (select (mapping ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (value ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1))))) (and (= (key ?_p0) (key ?p0)) (= (mapping ?_p0) (store (mapping ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1))) ?p2))) (not (or (not (= (key ?p0) (key ?_p0))) (not (= (mapping ?p0) (mapping ?_p0)))))) (ite (not (and (select (key ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (= (select (mapping ?p0) (key ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))) (value ((as mk-entry (Entry Int Int)) ?p1 (select (mapping ?p0) ?p1)))))) (= ?r 7) (and (select (key ?p0) ?p1) (= (select (mapping ?p0) ?p1) ?r)))))))
