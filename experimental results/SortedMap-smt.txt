#### submap(Object,Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Array (Entry Int Int) Bool))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?p2 Int)
(assert (and (>= ?p2 -2) (<= ?p2 7)))
(declare-const ?r (Map Int Int))
(assert (= (key ?r) ((_ map and) (key ?r) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?r) x) (and (>= (select (mapping ?r) x) -2) (<= (select (mapping ?r) x) 6)))))
(assert (and  (= true (and (forall ((x Int)) (=> (select (key ?r) x) (and (select (key ?p0) x) (= (select (mapping ?r) x) (select (mapping ?p0) x))))) (forall ((_key Int)) (=> (select (key ?p0) _key) (ite (and (ite true (>= _key ?p1) (> _key ?p1)) (ite false (<= _key ?p2) (< _key ?p2))) (and (select (key ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (= (select (mapping ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (value ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key))))) (not (and (select (key ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (= (select (mapping ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (value ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))))))))))))
#### headmap(Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Array (Entry Int Int) Bool))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?r (Map Int Int))
(assert (= (key ?r) ((_ map and) (key ?r) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?r) x) (and (>= (select (mapping ?r) x) -2) (<= (select (mapping ?r) x) 6)))))
(assert (and  (= true (and (forall ((x Int)) (=> (select (key ?r) x) (and (select (key ?p0) x) (= (select (mapping ?r) x) (select (mapping ?p0) x))))) (forall ((_key Int)) (=> (select (key ?p0) _key) (ite (ite false (<= _key ?p1) (< _key ?p1)) (and (select (key ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (= (select (mapping ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (value ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key))))) (not (and (select (key ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (= (select (mapping ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (value ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))))))))))))
#### tailmap(Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Array (Entry Int Int) Bool))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?r (Map Int Int))
(assert (= (key ?r) ((_ map and) (key ?r) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?r) x) (and (>= (select (mapping ?r) x) -2) (<= (select (mapping ?r) x) 6)))))
(assert (and  (= true (and (forall ((x Int)) (=> (select (key ?r) x) (and (select (key ?p0) x) (= (select (mapping ?r) x) (select (mapping ?p0) x))))) (forall ((_key Int)) (=> (select (key ?p0) _key) (ite (ite true (>= _key ?p1) (> _key ?p1)) (and (select (key ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (= (select (mapping ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (value ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key))))) (not (and (select (key ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (= (select (mapping ?r) (key ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))) (value ((as mk-entry (Entry Int Int)) _key (select (mapping ?p0) _key)))))))))))))
#### firstkey() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 Int)
(assert (and (>= t0 -2) (<= t0 7)))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 7)))
(assert (and (ite (= (s!ze (key ?p0) 6) 0) (= t0 (+ 6 1)) (and (select (key ?p0) t0) (forall ((x Int)) (=> (select (key ?p0) x) (<= t0 x))))) (= ?r t0)))
#### lastkey() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 Int)
(assert (and (>= t0 -2) (<= t0 7)))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 7)))
(assert (and (ite (= (s!ze (key ?p0) 6) 0) (= t0 (+ 6 1)) (and (select (key ?p0) t0) (forall ((x Int)) (=> (select (key ?p0) x) (>= t0 x))))) (= ?r t0)))
#### keyset() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r (Set Int))
(assert (= (mapping ?r) ((_ map and) (mapping ?r) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (and  (= true (= (mapping ?r) (key ?p0)))))
#### entryset() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Array (Entry Int Int) Bool))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r (Set (Entry Int Int)))
(assert (and (and (forall ((x Int)(y Int)) (ite (and (select (key ?p0) x) (= y (select (mapping ?p0) x))) (select t0 ((as mk-entry (Entry Int Int)) x y)) (not (select t0 ((as mk-entry (Entry Int Int)) x y))))) ) (= true (= (mapping ?r) t0))))
