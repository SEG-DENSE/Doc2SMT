#### iterator() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Iterator Int))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (Iterator Int))
(assert (and (and (= (mapping t0) (mapping ?p0)) (forall ((x Int)) (not (select (previous t0) x)))) (= ?r t0)))
#### size() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 6)))
(assert (and  (= ?r (s!ze (mapping ?p0) 6))))
#### empty() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r Bool)
(assert (= ?r (= (s!ze (mapping ?p0) 6) 0)))
#### contains(Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?r Bool)
(assert (and  (= ?r (select (mapping ?p0) ?p1))))
#### add(Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?_p0 (Set Int))
(assert (= (mapping ?_p0) ((_ map and) (mapping ?_p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?r Bool)
(assert (and (and  (= true (ite (not (select (mapping ?p0) ?p1)) (= (mapping ?_p0) (store (mapping ?p0) ?p1 true)) (not (not (= (mapping ?p0) (mapping ?_p0))))))) (and  (= ?r (not (select (mapping ?p0) ?p1))))))
#### remove(Object) ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?_p0 (Set Int))
(assert (= (mapping ?_p0) ((_ map and) (mapping ?_p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?r Bool)
(assert (and (and  (= true (ite (select (mapping ?p0) ?p1) (= (mapping ?_p0) (store (mapping ?p0) ?p1 false)) (not (not (= (mapping ?p0) (mapping ?_p0))))))) (and  (= ?r (select (mapping ?p0) ?p1)))))
#### clear() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?_p0 (Set Int))
(assert (= (mapping ?_p0) ((_ map and) (mapping ?_p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (and  (= true (= (mapping ?_p0) ((_ map and) (mapping ?p0) ((_ map not) (mapping ?p0)))))))
#### clone() ####
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (Set Int))
(assert (= (mapping ?r) ((_ map and) (mapping ?r) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (and  (= ?r ?p0)))
